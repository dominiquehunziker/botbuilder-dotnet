> LG files define templates that help with language generation. 
> LG files are similar to LU files - markdown files; simple text files to manage bot's responses

> Welcome template with variations as a markdown list
> LG engine will resolve this template to one of the provided variations

# WelcomeTemplate
- Hi
- Hello
- Howdy

> Templates can refer to other templates. Template references are enclosed in square brackets - []
# GreetingTemplate
- ${WelcomeTemplate()}, what can I do for you today?

> Templates can refer to entities as well. Entity references are enclosed in curly brackets - {}
# EchoTemplate
- ${EchoPrefix()} '${Activity.Text}'

# EchoPrefix
- You said
- Roger
- I picked up

> Templates can include expressions as conditions and inline variations
# WordGameReply
- IF: ${GameName == 'MarcoPolo'}
    - ${WelcomeTemplate()} Polo
    - Welcome back Polo!
- ELSEIF: ${GameName == 'HipHip'}
    - ${WelcomeTemplate()} Hurray
- ELSE:
    - ${WelcomeTemplate()}

> Templates can be parametrized
# TimeOfDayReadOut(parameter1)
- IF: ${parameter1 == 'morning'}
    - Good morning
    - Its a wonderful morning!
- ELSE:
    - Good evening

# TimeOfDayExmple
- ${TimeOfDayReadOut(timeOfDay)}
- Uh, ask me that again.. Just for fun.

> You can have multi-line responses with template resolution. Multi-line content is enclosed in ```. 
> Resolution applied to content within ${}
> \ is escape charater.
# MultiLineExample
- ```
    This is a multi-line list
    - one
    - two
    - Greeting: ${WelcomeTemplate()}
```
- ```
    This a variation
    - three
    - Greeting: ${WelcomeTemplate()}
```

> You can include custom payload in multi-line resolution, use this for cards etc.
# CardExample
- ```
    {
        "Title": "${WelcomeTemplate()}",
        "Images": [
            {
                "url": "${ImageCollection()}"
            }
        ],
        "SubTitle": "This is an exmple of a card. ${GreetingTemplate()}",
        "Text": "This is a Hero Card example"
    }
    ```

# ImageCollection
- https://sec.ch9.ms/ch9/7ff5/e07cfef0-aa3b-40bb-9baa-7c9ef8ff7ff5/buildreactionbotframework_960.jpg
- https://docs.microsoft.com/en-us/bot-framework/media/how-it-works/architecture-resize.png


>> Other cool features::
> Inline expressions in variations
> Pre-defined functions to use in expressions 
> Ability to independently update bot's response assets without need to redeploy bot
> Simple text file format to easily integrate with your existing development processes
> Command line tools to parse, validate and collate LG files

> 
> [Today,] you can expect a [high] of {high} [and] tomorrow looks really [good] 
> [Tonight,] you can expect a [low] of {low} [but] tomorrow looks really [bad]

 # PartOfDay
- IF: ${partOfDay == 'morning'}
    - Today 
    - This morning 
- ELSEIF: ${partOfDay == 'night'}
    - Tonight 
    - This evining
- ELSE:
    - error PartOfDay
 
# HighLow
- IF: ${partOfDay == 'morning'}
    - high
- ELSEIF: ${partOfDay == 'night'}
    - low
- ELSE:
    - error HighLow

# ConjunctureTemplate 
- IF: ${isAGoodDay == 'true'}
    - and
- ELSEIF: ${isAGoodDay == 'false'}
    - but
- ELSE:
    - error ConjunctureTemplate 

# TempByPartOfDay
- IF: ${partOfDay == 'morning'}
    - ${high}
- ELSEIF: ${partOfDay == 'night'}
    - ${low}
- ELSE:
    - error TempByPartOfDay

# GoodBad
- IF: ${isAGoodDay == 'true'}
    - good
- ELSEIF: ${isAGoodDay == 'false'}
    - bad
- ELSE:
    - error GoodBad

# WeatherForecast
- ${PartOfDay()}, you can expect a ${HighLow()} of ${TempByPartOfDay()} ${ConjunctureTemplate()} tomorrow looks really ${GoodBad()}
